# docker box definition
box: ubuntu:xenial
command-timeout: 60
# defining the dev pipeline
build:
  steps:
    - install-packages:
      packages: git wget bzip2 zip tar
    - script:
        name: Set up environment variables and functions
        code: |
          # Output locations for built toolchains
          PREFIX_LINUX=$WERCKER_SOURCE_DIR/build/linux
          PREFIX_WIN32=$WERCKER_SOURCE_DIR/build/win32
          PREFIX_WIN64=$WERCKER_SOURCE_DIR/build/win64
          PREFIX_LIBC=$WERCKER_SOURCE_DIR/build/libc
          
          #version to build
          NAME_BINUTILS="binutils-2.26"
          NAME_GCC="gcc-6.2.0"
          NAME_LIBC="avr-libc-2.0.0"
          
          GITHUB_RELEASE_VERSION="$NAME_GCC---$NAME_LIBC---$NAME_BINUTILS"

          HOST_WIN32="i686-w64-mingw32"
          HOST_WIN64="x86_64-w64-mingw32"

          OPTS_BINUTILS="--target=avr --disable-nls"
          OPTS_GCC="--target=avr --enable-languages=c,c++ --disable-nls --disable-libssp --disable-libada --with-dwarf2 --disable-shared --enable-static"

          OPTS_LIBC=""

          PATH="$PATH":"$PREFIX_LINUX"/bin
          export PATH

          CC=""
          export CC
          
          confMake()
          {
            ../configure --prefix=$1 $2 $3 $4
            make -j 4
            make install-strip
            rm -rf *
          }
          
          mkdir -p "$PREFIX_LINUX"
          mkdir -p "$PREFIX_WIN32"
          mkdir -p "$PREFIX_WIN64"
          mkdir -p "$PREFIX_LIBC"
    - script:
        name: Get sources
        code: 
          - wget  -nv ftp://ftp.mirrorservice.org/sites/ftp.gnu.org/gnu/binutils/$NAME_BINUTILS.tar.bz2
          - wget  -nv ftp://ftp.mirrorservice.org/sites/sourceware.org/pub/gcc/releases/$NAME_GCC/$NAME_GCC.tar.bz2
          - wget  -nv ftp://ftp.mirrorservice.org/sites/download.savannah.gnu.org/releases/avr-libc/$NAME_LIBC.tar.bz2
    - install-packages:
        packages: make mingw-w64 gcc g++ ruby
    - script:
        name: Make AVR-Binutils
        code: 
          - cd $WERCKER_SOURCE_DIR
          - bunzip2 -c -q $NAME_BINUTILS.tar.bz2 | tar xf -
          - mkdir -p $NAME_BINUTILS/obj-avr
          - cd $NAME_BINUTILS/obj-avr
          - confMake "$PREFIX_LINUX" "$OPTS_BINUTILS"
          #confMake "$PREFIX_WIN32" "$OPTS_BINUTILS" --host=$HOST_WIN32 --build=`../config.guess`
          - confMake "$PREFIX_WIN64" "$OPTS_BINUTILS" --host=$HOST_WIN64 --build=`../config.guess`
    - script:
        name: Prepare AVR-GCC
        code: 
          - cd $WERCKER_SOURCE_DIR
          - bunzip2 -c -q $NAME_GCC.tar.bz2 | tar xf -
          - mkdir -p $NAME_GCC/obj-avr
          - $NAME_GCC/contrib/download_prerequisites
    - script:
        name: Make AVR-GCC for linux
        code: 
          - cd $WERCKER_SOURCE_DIR/$NAME_GCC/obj-avr
          - confMake "$PREFIX_LINUX" "$OPTS_GCC"
          #- confMake "$PREFIX_WIN32" "$OPTS_GCC" --host=$HOST_WIN32 --build=`../config.guess`
    - script:
        name: Make AVR-GCC for Windows
        code: 
          - cd $WERCKER_SOURCE_DIR/$NAME_GCC/obj-avr
          - confMake "$PREFIX_WIN64" "$OPTS_GCC" --host=$HOST_WIN64 --build=`../config.guess`
    - script:
        name: Make AVR-LIBC
        code: 
          - cd $WERCKER_SOURCE_DIR 
          - bunzip2 -c -q $NAME_LIBC.tar.bz2 | tar xf -
          - mkdir -p $NAME_LIBC/obj-avr
          - cd $NAME_LIBC/obj-avr
          - confMake "$PREFIX_LIBC" "$OPTS_LIBC" --host=avr --build=`../config.guess`
          cd $WERCKER_SOURCE_DIR
    - script:
        name: Compress builded EXEs
        code: 
          - cd $WERCKER_SOURCE_DIR
          - zip linux.zip $PREFIX_LINUX
          #- zip win32.zip $PREFIX_WIN32
          - zip win64.zip $PREFIX_WIN64
          - zip libc.zip $PREFIX_LIBC
    - script:
        name: Clean up
        code: 
          - rm $NAME_LIBC.tar.bz2
          - rm $NAME_GCC.tar.bz2
          - rm $NAME_BINUTILS.tar.bz2
          - rm -rf $PREFIX_LINUX
          #- rm -rf $PREFIX_WIN32
          - rm -rf $PREFIX_WIN64
          - rm -rf $PREFIX_LIBC
          
  after-steps:
    - wantedly/pretty-slack-notify:
        webhook_url: $SLACK_API_TOKEN
deploy:
      steps:
          - github-create-release:
            token: $GITHUB_TOKEN
            tag_name: $GITHUB_RELEASE_VERSION
            title: WinAVR $GITHUB_RELEASE_VERSION
            draft: true
          - github-upload-asset:
            token: $GITHUB_TOKEN
            file: $WERCKER_CACHE_DIR/linux.zip
            filename: linux-$GITHUB_RELEASE_VERSION.tgz
          - github-upload-asset:
            token: $GITHUB_TOKEN
            file: $WERCKER_CACHE_DIR/win64.zip
            filename: win64-$GITHUB_RELEASE_VERSION.tgz
          - github-upload-asset:
            token: $GITHUB_TOKEN
            file: build/libc.zip
            filename: libc-$GITHUB_RELEASE_VERSION.tgz
